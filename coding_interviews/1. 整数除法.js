// [TOPIC]: 给定两个整数 a 和 b ，求它们的除法的商 a/b ，要求不得使用乘号 '*'、除号 '/' 以及求余符号 '%' 。

/**
 * [TIPS]:
 * 整数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) = 8 以及 truncate(-2.7335) = -2
 * 假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−2^31, 2^31−1]。本题中，如果除法结果溢出，则返回 2^31 − 1
 */



/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
 var divide = function(a, b) {
    if (a === b) {
        return 1;
    }
    // 此题由于明确指出是 32 位，所以需要先考虑边界溢出问题
    const min = - Math.pow(2, 32);
    const max = Math.pow(2, 32) - 1;
    // 由于在此区间上有正有负，我们需要先统一符号，方便计算（由于 min 取绝对值也是负数，所以我们统一使用 负数）
    // 异或 相同为 false，不同 为 true
    const single = (a > 0) ^ (b > 0) ? -1 : 1;
    if (!a || (b === min && a !== min)) {
        // 当被除数为 0 时结果一定为0 
        // 若 b 为最小值，那么若 a 不为同一个数，那不考虑符号情况下 a 在任何情况下都小于 b，取整则直接为 0
        return 0;
    }

    // 由于 min 颠倒为正数时会比 max 大，会导致溢出，那么当 a 为 min，不能➗负数
    // 由于 min 已经是最小的了，若➗ >0 && <1 的数则会导致比 min 更小，造成溢出
    if (a === min && b < 1) {
        return max; 
    }
};


//  输入：a = 15, b = 2
//  输出：7
//  解释：15/2 = truncate(7.5) = 7

//  输入：a = 7, b = -3
//  输出：-2
//  解释：7/-3 = truncate(-2.33333..) = -2

//  输入：a = 1, b = 1
//  输出：1

//  输入：a = 0, b = 1
//  输出：0